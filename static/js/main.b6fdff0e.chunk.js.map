{"version":3,"sources":["colors.js","App.js","reportWebVitals.js","index.js"],"names":["COLORS","App","useState","quotesArray","setQuotesArray","quote","setQuote","author","setAuthor","bColor","setBColor","useEffect","data","Math","floor","random","length","fetch","then","r","json","quotes","className","style","backgroundColor","color","id","display","justifyContent","href","encodeURI","target","rel","icon","faTwitter","Button","variant","onClick","change","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAceA,G,MAdF,CACT,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,Y,+BCqDWC,MAvDf,WAAgB,IAAD,EACwBC,mBAAS,IADjC,mBACRC,EADQ,KACKC,EADL,OAEWF,mBAAS,IAFpB,mBAERG,EAFQ,KAEDC,EAFC,OAGaJ,mBAAS,IAHtB,mBAGRK,EAHQ,KAGAC,EAHA,OAIaN,mBAAS,QAJtB,mBAIRO,EAJQ,KAIAC,EAJA,KA8Bb,OAhBAC,qBAAY,WACV,GAAIR,EAAa,CACf,IAAIS,EAAOT,EAAYU,KAAKC,MAAMD,KAAKE,SAAWZ,EAAYa,SAC9DR,EAAUI,EAAKL,QACfD,EAASM,EAAKP,OACdK,EAAUV,EAAOa,KAAKC,MAAMD,KAAKE,SAAWf,EAAOgB,eAGnDC,MAxBI,0IAyBHC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAN,GACJR,EAAeQ,EAAKS,aAGvB,CAAClB,IAGF,qBAAKmB,UAAU,MAAMC,MAAS,CAACC,gBAAiBf,EAAQgB,MAAOhB,GAA/D,SACE,wBAAQa,UAAU,aAAlB,SACGjB,EACG,sBAAKqB,GAAG,YAAR,UACC,oBAAGA,GAAK,OAAR,cACKrB,EADL,OAGC,oBAAGqB,GAAK,SAAR,eACKnB,KAEL,sBAAKgB,MAAQ,CAACI,QAAS,OAASC,eAAgB,iBAAhD,UACE,mBAAGF,GAAK,cAAcG,KAAOC,UAAU,6CAAD,OAA8CzB,EAA9C,mBAA8DE,IAAWwB,OAAS,SAASC,IAAI,aAArI,SAAkJ,cAAC,IAAD,CAAiBP,MAAShB,EAAQwB,KAAMC,QAC1L,cAACC,EAAA,EAAD,CAAQC,QAAU,QAAQb,MAAS,CAACC,gBAAiBf,GAASiB,GAAK,YAAYW,QAAS,kBApCvF,WACb,IAAIzB,EAAOT,EAAYU,KAAKC,MAAMD,KAAKE,SAAWZ,EAAYa,SAC9DN,EAAUV,EAAOa,KAAKC,MAAMD,KAAKE,SAAWf,EAAOgB,UACnDR,EAAUI,EAAKL,QACfD,EAASM,EAAKP,OAgC4FiC,IAA9F,6BAGJ,8BACA,kDC7CGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b6fdff0e.chunk.js","sourcesContent":["var COLORS = [\n    '#16a085',\n    '#27ae60',\n    '#2c3e50',\n    '#f39c12',\n    '#e74c3c',\n    '#9b59b6',\n    '#FB6964',\n    '#342224',\n    '#472E32',\n    '#BDBB99',\n    '#77B1A9',\n    '#73A857'\n  ];\nexport default COLORS","import './App.scss';\nimport  { useState, useEffect } from 'react';\nimport COLORS from './colors'\nimport Button from 'react-bootstrap/Button'\nimport 'font-awesome/css/font-awesome.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'; \nimport {faTwitter} from '@fortawesome/free-brands-svg-icons'\n\nlet qdb = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n\nfunction App() {\n  let [quotesArray, setQuotesArray] =  useState('')\n  let [quote, setQuote] = useState('')\n  let [author, setAuthor] = useState('')\n  let [bColor, setBColor] = useState('#000')\n\n\n  const change = () => {\n    let data = quotesArray[Math.floor(Math.random() * quotesArray.length)];\n    setBColor(COLORS[Math.floor(Math.random() * COLORS.length)])\n    setAuthor(data.author)\n    setQuote(data.quote)\n  }\n\n  useEffect(  () => {\n    if( quotesArray ){\n      let data = quotesArray[Math.floor(Math.random() * quotesArray.length)];\n      setAuthor(data.author)\n      setQuote(data.quote)\n      setBColor(COLORS[Math.floor(Math.random() * COLORS.length)])\n    \n    }else{\n      fetch(qdb)\n      .then(r => r.json())\n      .then(data => {\n        setQuotesArray(data.quotes)\n      })\n    }\n  }, [quotesArray])\n\n  return (\n    <div className=\"App\" style = {{backgroundColor: bColor, color: bColor}}>\n      <header className=\"App-header\">\n        {quote \n          ? <div id='quote-box'>\n             <p id = 'text'>\n                \"{quote}\"\n              </p>\n              <p id = 'author'>\n                - {author}\n              </p>\n              <div style= {{display: 'flex' , justifyContent: 'space-between'}}>\n                <a id = 'tweet-quote' href ={encodeURI(`http://www.twitter.com/intent/tweet?text=\"${quote}\" \\n\\n- ${author}`)} target = '_blank' rel=\"noreferrer\"><FontAwesomeIcon color = {bColor} icon={faTwitter} /></a>\n                <Button variant = 'light' style = {{backgroundColor: bColor}} id = 'new-quote' onClick={() => change()}>New Quote</Button>\n              </div>\n          </div>\n          : <div>\n            <p>Loading...</p>\n          </div>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}